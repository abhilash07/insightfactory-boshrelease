#!/usr/bin/env bash
# Archive
# wget --progress=bar -O "$server_tmp_dir/$server_filename" "$server_url" 2>/tmp/stderr

use_shell=0

prerelease="false"

# Check whether a command exists - returns 0 if it does, 1 if it does not
exists() {
  if command -v $1 >/dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}


# Get command line arguments
while getopts spv: opt
do
  case "$opt" in
    v)  version="$OPTARG";;
    s)  use_shell=1;;
    p)  prerelease="true";;
    \?)   # unknown flag
      echo >&2 \
      "usage: $0 [-s] [-v version]"
      exit 1;;
  esac
done
shift `expr $OPTIND - 1`

machine=$(printf `uname -m`)

# Retrieve Platform and Platform Version
if [ -f "/etc/lsb-release" ] && grep -q DISTRIB_ID /etc/lsb-release;
then
  platform=$(grep DISTRIB_ID /etc/lsb-release | cut -d "=" -f 2 | tr '[A-Z]' '[a-z]')
  platform_version=$(grep DISTRIB_RELEASE /etc/lsb-release | cut -d "=" -f 2)
elif [ -f "/etc/debian_version" ];
then
  platform="debian"
  platform_version=$(printf `cat /etc/debian_version`)
elif [ -f "/etc/redhat-release" ];
then
  platform=$(sed 's/^\(.\+\) release.*/\1/' /etc/redhat-release | tr '[A-Z]' '[a-z]')
  platform_version=$(sed 's/^.\+ release \([.0-9]\+\).*/\1/' /etc/redhat-release)

  # If /etc/redhat-release exists, we act like RHEL by default
  if [ "$platform" = "fedora" ];
  then
    # Change platform version for use below.
    platform_version="6.0"
  fi
  platform="el"
elif [ -f "/etc/system-release" ];
then
  platform=$(sed 's/^\(.\+\) release.\+/\1/' /etc/system-release | tr '[A-Z]' '[a-z]')
  platform_version=$(sed 's/^.\+ release \([.0-9]\+\).*/\1/' /etc/system-release | tr '[A-Z]' '[a-z]')
  # amazon is built off of fedora, so act like RHEL
  if [ "$platform" = "amazon linux ami" ];
  then
    platform="el"
    platform_version="6.0"
  fi
# Apple OS X
elif [ -f "/usr/bin/sw_vers" ];
then
  platform="mac_os_x"
  # Matching the tab-space with sed is error-prone
  platform_version=$(sw_vers | awk '/^ProductVersion:/ { print $2 }')

  major_version=$(echo $platform_version | cut -d. -f1,2)
  case $major_version in
    "10.6") platform_version="10.6" ;;
    "10.7") platform_version="10.7" ;;
    "10.8") platform_version="10.7" ;;
    *) echo "No builds for platform: $major_version"
       report_bug
       exit 1
       ;;
  esac

  # x86_64 Apple hardware often runs 32-bit kernels (see OHAI-63)
  x86_64=$(sysctl -n hw.optional.x86_64)
  if [ $x86_64 -eq 1 ]; then
    machine="x86_64"
  fi
elif [ -f "/etc/release" ];
then
  platform="solaris2"
  machine=$(/usr/bin/uname -p)
  platform_version=$(/usr/bin/uname -r)
elif [ -f "/etc/SuSE-release" ];
then
  if grep -q 'Enterprise' /etc/SuSE-release;
  then
      platform="sles"
      platform_version=$(awk '/^VERSION/ {V = $3}; /^PATCHLEVEL/ {P = $3}; END {print V "." P}' /etc/SuSE-release)
  else
      platform="suse"
      platform_version=$(awk '/^VERSION =/ { print $3 }' /etc/SuSE-release)
  fi
elif [ "$(uname -s)" == "FreeBSD" ]; then
  platform="freebsd"
  platform_version=$(uname -r | sed 's/-.*//')
fi

if [ "x$platform" = "x" ];
then
  echo "Unable to determine platform version!"
  report_bug
  exit 1
fi

# Mangle $platform_version to pull the correct build
# for various platforms
major_version=$(echo $platform_version | cut -d. -f1)
case $platform in
  "el")
    case $major_version in
      "5") platform_version="5" ;;
      "6") platform_version="6" ;;
    esac
    ;;
  "debian")
    case $major_version in
      "5") platform_version="6";;
      "6") platform_version="6";;
      "7") platform_version="6";;
    esac
    ;;
  "freebsd")
    case $major_version in
      "8") platform_version="8" ;;
      "9") platform_version="9" ;;
    esac
    ;;
esac

if [ "x$platform_version" = "x" ];
then
  echo "Unable to determine platform version!"
  report_bug
  exit 1
fi

echo ''
echo "Setting up Insight Factory Client for ${platform}...please wait"
echo ''

sleep 3

clean_ubutntu(){
  apt-get remove ruby* -y
  apt-get autoremove -y
}

clean_el(){
  yum remove ruby* -y
}

case "$platform" in
  "ubuntu") clean_ubutntu ;;
  "el") clean_el ;;
esac

install_software_ubuntu(){
  apt-get update
  apt-get install build-essential -y
}

install_software_el(){
  yum groupinstall "Development Tools" -y
}

case "$platform" in
  "ubuntu") install_software_ubuntu ;;
  "el") install_software_el ;;
esac


setup_environment(){
  # Set the hostname
  hostname <%= index %>.<%= name %>.<%= spec.networks.methods(false).grep(/[^=]$/).first.to_s %>.<%= spec.deployment %>.<%= spec.dns_domain_name %>
  source /var/vcap/jobs/client/bin/job_properties.sh
  echo "source /var/vcap/jobs/client/bin/job_properties.sh" > /home/vcap/.bash_profile
  mkdir -p /var/vcap/data/hadoop/tmp/vcap
  chown -R vcap:vcap /var/vcap/data/hadoop/tmp/vcap
  echo 'Cloning repos'
  mkdir -p /home/vcap/ds
  cd /home/vcap/ds
  git clone https://github.com/apache/spark.git
  git clone https://github.com/twitter/scalding.git
  git clone https://github.com/nathanmarz/cascalog.git
  wget https://s3.amazonaws.com/velankanidownloads/repos/cf/blobs/spark-0.9.1-hadoop_2.3.0-bin.tar.gz
  chown -R vcap:vcap /home/vcap/ds
  echo 'Insight Factory Client setup complete...'
  echo ''
}

setup_environment

